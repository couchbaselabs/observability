// Code generated by mockery v2.14.0. DO NOT EDIT.

package mocks

import (
	mock "github.com/stretchr/testify/mock"

	values "github.com/couchbaselabs/cbmultimanager/cluster-monitor/pkg/values"
)

// Store is an autogenerated mock type for the Store type
type Store struct {
	mock.Mock
}

// AddAlias provides a mock function with given fields: alias
func (_m *Store) AddAlias(alias *values.ClusterAlias) error {
	ret := _m.Called(alias)

	var r0 error
	if rf, ok := ret.Get(0).(func(*values.ClusterAlias) error); ok {
		r0 = rf(alias)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// AddCloudCredentials provides a mock function with given fields: creds
func (_m *Store) AddCloudCredentials(creds *values.Credential) error {
	ret := _m.Called(creds)

	var r0 error
	if rf, ok := ret.Get(0).(func(*values.Credential) error); ok {
		r0 = rf(creds)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// AddCluster provides a mock function with given fields: cluster
func (_m *Store) AddCluster(cluster *values.CouchbaseCluster) error {
	ret := _m.Called(cluster)

	var r0 error
	if rf, ok := ret.Get(0).(func(*values.CouchbaseCluster) error); ok {
		r0 = rf(cluster)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// AddDismissal provides a mock function with given fields: dismissal
func (_m *Store) AddDismissal(dismissal values.Dismissal) error {
	ret := _m.Called(dismissal)

	var r0 error
	if rf, ok := ret.Get(0).(func(values.Dismissal) error); ok {
		r0 = rf(dismissal)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// AddUser provides a mock function with given fields: user
func (_m *Store) AddUser(user *values.User) error {
	ret := _m.Called(user)

	var r0 error
	if rf, ok := ret.Get(0).(func(*values.User) error); ok {
		r0 = rf(user)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Close provides a mock function with given fields:
func (_m *Store) Close() error {
	ret := _m.Called()

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteAlias provides a mock function with given fields: alias
func (_m *Store) DeleteAlias(alias string) error {
	ret := _m.Called(alias)

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(alias)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteCheckerResults provides a mock function with given fields: search
func (_m *Store) DeleteCheckerResults(search values.CheckerSearch) error {
	ret := _m.Called(search)

	var r0 error
	if rf, ok := ret.Get(0).(func(values.CheckerSearch) error); ok {
		r0 = rf(search)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteCluster provides a mock function with given fields: uuid
func (_m *Store) DeleteCluster(uuid string) error {
	ret := _m.Called(uuid)

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(uuid)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteDismissalForUnknownBuckets provides a mock function with given fields: knownBuckets, clusterUUID
func (_m *Store) DeleteDismissalForUnknownBuckets(knownBuckets []string, clusterUUID string) (int64, error) {
	ret := _m.Called(knownBuckets, clusterUUID)

	var r0 int64
	if rf, ok := ret.Get(0).(func([]string, string) int64); ok {
		r0 = rf(knownBuckets, clusterUUID)
	} else {
		r0 = ret.Get(0).(int64)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func([]string, string) error); ok {
		r1 = rf(knownBuckets, clusterUUID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteDismissalForUnknownNodes provides a mock function with given fields: knownNodes, clusterUUID
func (_m *Store) DeleteDismissalForUnknownNodes(knownNodes []string, clusterUUID string) (int64, error) {
	ret := _m.Called(knownNodes, clusterUUID)

	var r0 int64
	if rf, ok := ret.Get(0).(func([]string, string) int64); ok {
		r0 = rf(knownNodes, clusterUUID)
	} else {
		r0 = ret.Get(0).(int64)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func([]string, string) error); ok {
		r1 = rf(knownNodes, clusterUUID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteDismissals provides a mock function with given fields: search
func (_m *Store) DeleteDismissals(search values.DismissalSearchSpace) error {
	ret := _m.Called(search)

	var r0 error
	if rf, ok := ret.Get(0).(func(values.DismissalSearchSpace) error); ok {
		r0 = rf(search)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteExpiredDismissals provides a mock function with given fields:
func (_m *Store) DeleteExpiredDismissals() (int64, error) {
	ret := _m.Called()

	var r0 int64
	if rf, ok := ret.Get(0).(func() int64); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(int64)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteWhereBucketsDoNotMatch provides a mock function with given fields: knownBuckets, clusterUUID
func (_m *Store) DeleteWhereBucketsDoNotMatch(knownBuckets []string, clusterUUID string) (int64, error) {
	ret := _m.Called(knownBuckets, clusterUUID)

	var r0 int64
	if rf, ok := ret.Get(0).(func([]string, string) int64); ok {
		r0 = rf(knownBuckets, clusterUUID)
	} else {
		r0 = ret.Get(0).(int64)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func([]string, string) error); ok {
		r1 = rf(knownBuckets, clusterUUID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteWhereNodesDoNotMatch provides a mock function with given fields: knownNodes, clusterUUID
func (_m *Store) DeleteWhereNodesDoNotMatch(knownNodes []string, clusterUUID string) (int64, error) {
	ret := _m.Called(knownNodes, clusterUUID)

	var r0 int64
	if rf, ok := ret.Get(0).(func([]string, string) int64); ok {
		r0 = rf(knownNodes, clusterUUID)
	} else {
		r0 = ret.Get(0).(int64)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func([]string, string) error); ok {
		r1 = rf(knownNodes, clusterUUID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAlias provides a mock function with given fields: alias
func (_m *Store) GetAlias(alias string) (*values.ClusterAlias, error) {
	ret := _m.Called(alias)

	var r0 *values.ClusterAlias
	if rf, ok := ret.Get(0).(func(string) *values.ClusterAlias); ok {
		r0 = rf(alias)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*values.ClusterAlias)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(alias)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetCheckerResult provides a mock function with given fields: search
func (_m *Store) GetCheckerResult(search values.CheckerSearch) ([]*values.WrappedCheckerResult, error) {
	ret := _m.Called(search)

	var r0 []*values.WrappedCheckerResult
	if rf, ok := ret.Get(0).(func(values.CheckerSearch) []*values.WrappedCheckerResult); ok {
		r0 = rf(search)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*values.WrappedCheckerResult)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(values.CheckerSearch) error); ok {
		r1 = rf(search)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetCloudCredentials provides a mock function with given fields: sensitive
func (_m *Store) GetCloudCredentials(sensitive bool) ([]*values.Credential, error) {
	ret := _m.Called(sensitive)

	var r0 []*values.Credential
	if rf, ok := ret.Get(0).(func(bool) []*values.Credential); ok {
		r0 = rf(sensitive)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*values.Credential)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(bool) error); ok {
		r1 = rf(sensitive)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetCluster provides a mock function with given fields: uuid, sensitive
func (_m *Store) GetCluster(uuid string, sensitive bool) (*values.CouchbaseCluster, error) {
	ret := _m.Called(uuid, sensitive)

	var r0 *values.CouchbaseCluster
	if rf, ok := ret.Get(0).(func(string, bool) *values.CouchbaseCluster); ok {
		r0 = rf(uuid, sensitive)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*values.CouchbaseCluster)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, bool) error); ok {
		r1 = rf(uuid, sensitive)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetClusters provides a mock function with given fields: sensitive, enterpriseOnly
func (_m *Store) GetClusters(sensitive bool, enterpriseOnly bool) ([]*values.CouchbaseCluster, error) {
	ret := _m.Called(sensitive, enterpriseOnly)

	var r0 []*values.CouchbaseCluster
	if rf, ok := ret.Get(0).(func(bool, bool) []*values.CouchbaseCluster); ok {
		r0 = rf(sensitive, enterpriseOnly)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*values.CouchbaseCluster)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(bool, bool) error); ok {
		r1 = rf(sensitive, enterpriseOnly)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetDismissals provides a mock function with given fields: search
func (_m *Store) GetDismissals(search values.DismissalSearchSpace) ([]*values.Dismissal, error) {
	ret := _m.Called(search)

	var r0 []*values.Dismissal
	if rf, ok := ret.Get(0).(func(values.DismissalSearchSpace) []*values.Dismissal); ok {
		r0 = rf(search)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*values.Dismissal)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(values.DismissalSearchSpace) error); ok {
		r1 = rf(search)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetUser provides a mock function with given fields: user
func (_m *Store) GetUser(user string) (*values.User, error) {
	ret := _m.Called(user)

	var r0 *values.User
	if rf, ok := ret.Get(0).(func(string) *values.User); ok {
		r0 = rf(user)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*values.User)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(user)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// IsInitialized provides a mock function with given fields:
func (_m *Store) IsInitialized() (bool, error) {
	ret := _m.Called()

	var r0 bool
	if rf, ok := ret.Get(0).(func() bool); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(bool)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SetCheckerResult provides a mock function with given fields: result
func (_m *Store) SetCheckerResult(result *values.WrappedCheckerResult) error {
	ret := _m.Called(result)

	var r0 error
	if rf, ok := ret.Get(0).(func(*values.WrappedCheckerResult) error); ok {
		r0 = rf(result)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateCluster provides a mock function with given fields: cluster
func (_m *Store) UpdateCluster(cluster *values.CouchbaseCluster) error {
	ret := _m.Called(cluster)

	var r0 error
	if rf, ok := ret.Get(0).(func(*values.CouchbaseCluster) error); ok {
		r0 = rf(cluster)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

type mockConstructorTestingTNewStore interface {
	mock.TestingT
	Cleanup(func())
}

// NewStore creates a new instance of Store. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewStore(t mockConstructorTestingTNewStore) *Store {
	mock := &Store{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
