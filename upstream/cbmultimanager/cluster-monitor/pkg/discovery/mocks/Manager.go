// Code generated by mockery v2.14.0. DO NOT EDIT.

package mocks

import (
	discovery "github.com/couchbaselabs/cbmultimanager/cluster-monitor/pkg/discovery"
	mock "github.com/stretchr/testify/mock"

	time "time"
)

// Manager is an autogenerated mock type for the Manager type
type Manager struct {
	mock.Mock
}

// HasBeenDiscovered provides a mock function with given fields:
func (_m *Manager) HasBeenDiscovered() chan discovery.ClusterDiscoveryStatus {
	ret := _m.Called()

	var r0 chan discovery.ClusterDiscoveryStatus
	if rf, ok := ret.Get(0).(func() chan discovery.ClusterDiscoveryStatus); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(chan discovery.ClusterDiscoveryStatus)
		}
	}

	return r0
}

// Start provides a mock function with given fields: interval
func (_m *Manager) Start(interval time.Duration) {
	_m.Called(interval)
}

// Stop provides a mock function with given fields:
func (_m *Manager) Stop() {
	_m.Called()
}

type mockConstructorTestingTNewManager interface {
	mock.TestingT
	Cleanup(func())
}

// NewManager creates a new instance of Manager. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewManager(t mockConstructorTestingTNewManager) *Manager {
	mock := &Manager{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
