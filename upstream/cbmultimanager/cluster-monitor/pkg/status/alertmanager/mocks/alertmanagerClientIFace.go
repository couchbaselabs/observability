// Code generated by mockery v2.14.0. DO NOT EDIT.

package mocks

import (
	context "context"

	types "github.com/couchbaselabs/cbmultimanager/cluster-monitor/pkg/status/alertmanager/types"
	mock "github.com/stretchr/testify/mock"
)

// AlertmanagerClientIFace is an autogenerated mock type for the alertmanagerClientIFace type
type AlertmanagerClientIFace struct {
	mock.Mock
}

// BaseURL provides a mock function with given fields:
func (_m *AlertmanagerClientIFace) BaseURL() string {
	ret := _m.Called()

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// PostAlerts provides a mock function with given fields: ctx, alerts
func (_m *AlertmanagerClientIFace) PostAlerts(ctx context.Context, alerts []types.PostableAlert) error {
	ret := _m.Called(ctx, alerts)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, []types.PostableAlert) error); ok {
		r0 = rf(ctx, alerts)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

type mockConstructorTestingTNewAlertmanagerClientIFace interface {
	mock.TestingT
	Cleanup(func())
}

// NewAlertmanagerClientIFace creates a new instance of AlertmanagerClientIFace. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewAlertmanagerClientIFace(t mockConstructorTestingTNewAlertmanagerClientIFace) *AlertmanagerClientIFace {
	mock := &AlertmanagerClientIFace{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
