// Code generated by mockery 2.7.5. DO NOT EDIT.

package mocks

import (
	context "context"
	io "io"

	couchbase "github.com/couchbaselabs/cbmultimanager/couchbase"

	mock "github.com/stretchr/testify/mock"

	time "time"

	values "github.com/couchbaselabs/cbmultimanager/values"
)

// ClientIFace is an autogenerated mock type for the ClientIFace type
type ClientIFace struct {
	mock.Mock
}

// GetAutoFailOverSettings provides a mock function with given fields:
func (_m *ClientIFace) GetAutoFailOverSettings() (*couchbase.AutoFailoverSettings, error) {
	ret := _m.Called()

	var r0 *couchbase.AutoFailoverSettings
	if rf, ok := ret.Get(0).(func() *couchbase.AutoFailoverSettings); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*couchbase.AutoFailoverSettings)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetBootstrap provides a mock function with given fields:
func (_m *ClientIFace) GetBootstrap() time.Time {
	ret := _m.Called()

	var r0 time.Time
	if rf, ok := ret.Get(0).(func() time.Time); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(time.Time)
	}

	return r0
}

// GetBucketStats provides a mock function with given fields: bucketName
func (_m *ClientIFace) GetBucketStats(bucketName string) (*values.BucketStat, error) {
	ret := _m.Called(bucketName)

	var r0 *values.BucketStat
	if rf, ok := ret.Get(0).(func(string) *values.BucketStat); ok {
		r0 = rf(bucketName)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*values.BucketStat)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(bucketName)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetBucketsSummary provides a mock function with given fields:
func (_m *ClientIFace) GetBucketsSummary() (values.BucketsSummary, error) {
	ret := _m.Called()

	var r0 values.BucketsSummary
	if rf, ok := ret.Get(0).(func() values.BucketsSummary); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(values.BucketsSummary)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetClusterInfo provides a mock function with given fields:
func (_m *ClientIFace) GetClusterInfo() *couchbase.PoolsMetadata {
	ret := _m.Called()

	var r0 *couchbase.PoolsMetadata
	if rf, ok := ret.Get(0).(func() *couchbase.PoolsMetadata); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*couchbase.PoolsMetadata)
		}
	}

	return r0
}

// GetDiagLog provides a mock function with given fields: ctx
func (_m *ClientIFace) GetDiagLog(ctx context.Context) (io.ReadCloser, error) {
	ret := _m.Called(ctx)

	var r0 io.ReadCloser
	if rf, ok := ret.Get(0).(func(context.Context) io.ReadCloser); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(io.ReadCloser)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetMetric provides a mock function with given fields: start, end, metricName, step
func (_m *ClientIFace) GetMetric(start string, end string, metricName string, step string) (*couchbase.Metric, error) {
	ret := _m.Called(start, end, metricName, step)

	var r0 *couchbase.Metric
	if rf, ok := ret.Get(0).(func(string, string, string, string) *couchbase.Metric); ok {
		r0 = rf(start, end, metricName, step)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*couchbase.Metric)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, string, string, string) error); ok {
		r1 = rf(start, end, metricName, step)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetNodeStorage provides a mock function with given fields:
func (_m *ClientIFace) GetNodeStorage() (*values.Storage, error) {
	ret := _m.Called()

	var r0 *values.Storage
	if rf, ok := ret.Get(0).(func() *values.Storage); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*values.Storage)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetNodesSummary provides a mock function with given fields:
func (_m *ClientIFace) GetNodesSummary() (values.NodesSummary, error) {
	ret := _m.Called()

	var r0 values.NodesSummary
	if rf, ok := ret.Get(0).(func() values.NodesSummary); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(values.NodesSummary)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetPoolsBucket provides a mock function with given fields:
func (_m *ClientIFace) GetPoolsBucket() ([]couchbase.Bucket, error) {
	ret := _m.Called()

	var r0 []couchbase.Bucket
	if rf, ok := ret.Get(0).(func() []couchbase.Bucket); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]couchbase.Bucket)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetSASLLogs provides a mock function with given fields: ctx, logName
func (_m *ClientIFace) GetSASLLogs(ctx context.Context, logName string) (io.ReadCloser, error) {
	ret := _m.Called(ctx, logName)

	var r0 io.ReadCloser
	if rf, ok := ret.Get(0).(func(context.Context, string) io.ReadCloser); ok {
		r0 = rf(ctx, logName)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(io.ReadCloser)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, logName)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetUILogs provides a mock function with given fields:
func (_m *ClientIFace) GetUILogs() ([]couchbase.UILogEntry, error) {
	ret := _m.Called()

	var r0 []couchbase.UILogEntry
	if rf, ok := ret.Get(0).(func() []couchbase.UILogEntry); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]couchbase.UILogEntry)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
