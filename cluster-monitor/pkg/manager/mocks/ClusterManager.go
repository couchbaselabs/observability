// Code generated by mockery v2.14.0. DO NOT EDIT.

package mocks

import (
	values "github.com/couchbaselabs/cbmultimanager/cluster-monitor/pkg/values"
	mock "github.com/stretchr/testify/mock"
)

// ClusterManager is an autogenerated mock type for the ClusterManager type
type ClusterManager struct {
	mock.Mock
}

// GetProgress provides a mock function with given fields:
func (_m *ClusterManager) GetProgress() (*values.ClusterProgress, error) {
	ret := _m.Called()

	var r0 *values.ClusterProgress
	if rf, ok := ret.Get(0).(func() *values.ClusterProgress); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*values.ClusterProgress)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ManuallyHeartBeat provides a mock function with given fields:
func (_m *ClusterManager) ManuallyHeartBeat() error {
	ret := _m.Called()

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ManuallyRunCheckers provides a mock function with given fields:
func (_m *ClusterManager) ManuallyRunCheckers() error {
	ret := _m.Called()

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Start provides a mock function with given fields:
func (_m *ClusterManager) Start() error {
	ret := _m.Called()

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Stop provides a mock function with given fields:
func (_m *ClusterManager) Stop() {
	_m.Called()
}

// UpdateClusterInfo provides a mock function with given fields: cluster
func (_m *ClusterManager) UpdateClusterInfo(cluster *values.CouchbaseCluster) {
	_m.Called(cluster)
}

type mockConstructorTestingTNewClusterManager interface {
	mock.TestingT
	Cleanup(func())
}

// NewClusterManager creates a new instance of ClusterManager. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewClusterManager(t mockConstructorTestingTNewClusterManager) *ClusterManager {
	mock := &ClusterManager{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
