---
# Prometheus service discovery via the K8S API requires some permissions
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: monitoring-endpoints-role
  labels:
    rbac.couchbase.observability.com/aggregate-to-monitoring: "true"
rules:
- apiGroups: [""]
  resources: ["services", "endpoints", "pods"]
  verbs: ["get", "list", "watch"]
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: monitoring-role-binding
roleRef:
  kind: ClusterRole
  name: monitoring-endpoints-role
  apiGroup: rbac.authorization.k8s.io
subjects:
- kind: Group
  name: system:serviceaccounts
  apiGroup: rbac.authorization.k8s.io
---
apiVersion: v1
kind: Service
metadata:
  name: couchbase-grafana-http
  labels:
    run: couchbase-grafana
spec:
  ports:
  - port: 8080
    protocol: TCP
  selector:
    run: couchbase-grafana
---
# To allow us to send to Loki we need this
apiVersion: v1
kind: Service
metadata:
  name: loki
  labels:
    run: couchbase-grafana
spec:
  ports:
  - port: 3100
    protocol: TCP
  selector:
    run: couchbase-grafana
---
# Our actual container to run
apiVersion: apps/v1
kind: Deployment
metadata:
  name: couchbase-grafana
spec:
  selector:
    matchLabels:
      run: couchbase-grafana
  replicas: 1
  template:
    metadata:
      annotations:
        kubectl.kubernetes.io/default-logs-container: couchbase-grafana
      labels:
        run: couchbase-grafana
    spec:
      # The Prometheus configuration
      volumes:
        - name: prometheus-config-volume
          configMap:
            name: prometheus-config
      containers:
      # Watch for changes to the volumes and auto-reload the prometheus configuration if seen
      - name: prometheus-config-watcher
        image: weaveworks/watch:master-9199bf5
        args: ["-v", "-t", "-p=/etc/prometheus/custom", "curl", "-X", "POST", "--fail", "-o", "-", "-sS", "http://localhost:8080/prometheus/-/reload"]
        volumeMounts:
        - name: prometheus-config-volume
          mountPath: /etc/prometheus/custom
      # The microlith itself
      - name: couchbase-grafana
        ports:
        - name: http
          containerPort: 8080
        - name: loki # So we can push logs to it
          containerPort: 3100
        startupProbe:
          httpGet:
            # Uses Grafana check so change to Prometheus or other if not running
            path: /grafana/api/health # https://grafana.com/docs/grafana/latest/http_api/other/#returns-health-information-about-grafana
            port: http
          failureThreshold: 3
          periodSeconds: 5
        livenessProbe:
          httpGet:
            path: /grafana/api/health
            port: http
          failureThreshold: 1
          periodSeconds: 10
        volumeMounts:
        - name: prometheus-config-volume
          mountPath: /etc/prometheus/custom # keep /etc/prometheus for any defaults
        image: $COS_IMAGE # substitute with actual image
        env:
        - name: KUBERNETES_DEPLOYMENT
          value: "true"
        - name: PROMETHEUS_CONFIG_FILE
          value: /etc/prometheus/custom/prometheus-default-config.yaml
        - name: PROMETHEUS_CONFIG_TEMPLATE_FILE
          value: ignore
        # Log to files rather than stdout
        # - name: ENABLE_LOG_TO_FILE
        #   value: "true"
        # Disable components as required - matching entrypoint script name
        # - name: DISABLE_LOKI
        #   value: "true"
        # - name: DISABLE_WEBSERVER
        #   value: "true"
        # To define customisation make sure to set up this config map first
        envFrom:
          - configMapRef:
              name: $TEST_CUSTOM_CONFIG
              optional: true