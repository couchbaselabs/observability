// Package v1 provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.8.3 DO NOT EDIT.
package v1

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// Cluster defines model for Cluster.
type Cluster struct {
	CouchbaseConfig struct {
		ManagementPort *float32 `json:"managementPort,omitempty"`
		Password       string   `json:"password"`
		UseTLS         *bool    `json:"useTLS,omitempty"`
		Username       string   `json:"username"`
	} `json:"couchbaseConfig"`
	Hostname      string `json:"hostname"`
	MetricsConfig *struct {
		MetricsPort *float32 `json:"metricsPort,omitempty"`
	} `json:"metricsConfig,omitempty"`
	Name *string `json:"name,omitempty"`
}

// PostClustersAddJSONBody defines parameters for PostClustersAdd.
type PostClustersAddJSONBody Cluster

// PostClustersAddJSONRequestBody defines body for PostClustersAdd for application/json ContentType.
type PostClustersAddJSONRequestBody = PostClustersAddJSONBody

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Add a new Couchbase cluster to Prometheus
	// (POST /clusters/add)
	PostClustersAdd(ctx echo.Context) error
	// Collects diagnostic information about CMOS for Support analysis.
	// (POST /collectInformation)
	PostCollectInformation(ctx echo.Context) error
	// Outputs the OpenAPI specification for this API.
	// (GET /openapi.json)
	GetOpenapiJson(ctx echo.Context) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// PostClustersAdd converts echo context to params.
func (w *ServerInterfaceWrapper) PostClustersAdd(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostClustersAdd(ctx)
	return err
}

// PostCollectInformation converts echo context to params.
func (w *ServerInterfaceWrapper) PostCollectInformation(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostCollectInformation(ctx)
	return err
}

// GetOpenapiJson converts echo context to params.
func (w *ServerInterfaceWrapper) GetOpenapiJson(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetOpenapiJson(ctx)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {
	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.POST(baseURL+"/clusters/add", wrapper.PostClustersAdd)
	router.POST(baseURL+"/collectInformation", wrapper.PostCollectInformation)
	router.GET(baseURL+"/openapi.json", wrapper.GetOpenapiJson)
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/5xVTXPjNgz9Kxy2R0dSkk6b1alpmumkkzSZem/pHmgKsrihCJYA7Xoy/u8dUnL8kXh3",
	"szcNwfcAPDxCz1Jj79GBY5L1syTdQa/y55WNxBDSp2oawwadsg8BPQQ2QLJulSWYSL9zlOii7maK4Apd",
	"a+bvRPfKqTn04PgBA6eTBloVLcv6ovpwOpG88iBr6WI/gyDXE+kV0RJDk+6OQeJg3DwFI8HH2+lOaIZo",
	"QbkxFpzq4Q3geiID/BtNgEbWj9ubO9k+vZSCs8+gOTF2SHyEcSJ74GA0fZ8qA3YjyYEG6zdK+bbGDme1",
	"08Lr/hLYuBaHITtWOhcDvTJW1jn06wthobGXmzLk1eZ4Im6cLuRExpAwHbOnuiz3YeuJbIB0MD7JI2v5",
	"9/X0o7h8uBHYCu5ADNXGoFJcTCEsjE7DsUaDo9z3mPjSK92BOCuqVzmXy2WhcrjAMC9HLJW3N1fXf02v",
	"TxImKWvY7rUg7tAZxqSn+CdW1dnP4n5GEBZqZqzhlZiy0k/i5GiVCwg09LU4TRnQg1PeyFqeF1Vxnk3G",
	"XZ57qYcnSKVqssE9UhY9mSPz3jSylg9IPD5WumwaOQwZiH/DZrUZF7iMVN5bozO2/EypjM2bT18/Bmhl",
	"LX8ot0uhHDdCuVkH630XcYiQD8hjEjDRnFXVu9K+4yngUzadi72sH1PurVFf3vaBy/HpiJv3XTb2J1TT",
	"QCMoag1EbbR2lRkp9r0Kq2SqphFKOFiKrSnGQQlG8RCwB+4gUsaVGq0FzTeuxdCrIdkXJ/n6/lflZfiP",
	"S2+VcbJ20dpXzU05gOrTA7I4nyfvYmQfWbQBezGWeGK2OQvqDtoe6yLRGDV3SGy02AEINcPI4urufipa",
	"DGIavcfAQjllV2SoGNQY3V5sTDCHN2T4A/h+uPcnfUv7X3bXVyefcqX1cl5Ugjxo045kuRHuDKXtcyDH",
	"fdaP8kLaEBwHF0PetCcgkKwfnw9quEWtrLgzOqA13O2tq7osbQqn5VxfVBdVqfNuKZU3ZV4ib7P9Dguw",
	"6NPf9DjfL6cffnoh+rT+PwAA//8bCrtwEAgAAA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
