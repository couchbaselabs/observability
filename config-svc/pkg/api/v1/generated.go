// Package v1 provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.8.3 DO NOT EDIT.
package v1

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// Defines values for ErrorResponseOk.
const (
	ErrorResponseOkFalse ErrorResponseOk = false
)

// AlertNotificationConfig defines model for AlertNotificationConfig.
type AlertNotificationConfig struct {
	Email *EmailAlertNotificationConfig `json:"email,omitempty"`
	Slack *SlackAlertNotificationConfig `json:"slack,omitempty"`
}

// Cluster defines model for Cluster.
type Cluster struct {
	CouchbaseConfig struct {
		ManagementPort *float32 `json:"managementPort,omitempty"`
		Password       string   `json:"password"`
		UseTLS         *bool    `json:"useTLS,omitempty"`
		Username       string   `json:"username"`
	} `json:"couchbaseConfig"`
	Hostname string  `json:"hostname"`
	Name     *string `json:"name,omitempty"`
}

// EmailAlertNotificationConfig defines model for EmailAlertNotificationConfig.
type EmailAlertNotificationConfig struct {
	From       string  `json:"from"`
	Hello      *string `json:"hello,omitempty"`
	Host       string  `json:"host"`
	Identity   *string `json:"identity,omitempty"`
	Password   *string `json:"password,omitempty"`
	RequireTLS *bool   `json:"requireTLS,omitempty"`
	Secret     *string `json:"secret,omitempty"`
	Username   *string `json:"username,omitempty"`
}

// ErrorResponse defines model for ErrorResponse.
type ErrorResponse struct {
	Error string          `json:"error"`
	Ok    ErrorResponseOk `json:"ok"`
}

// ErrorResponseOk defines model for ErrorResponse.Ok.
type ErrorResponseOk bool

// SlackAlertNotificationConfig defines model for SlackAlertNotificationConfig.
type SlackAlertNotificationConfig struct {
	// The Slack webhook has been configured using slack_api_file, and cannot be managed by CMOS.
	ConfiguredExternally *bool  `json:"configuredExternally,omitempty"`
	WebhookURL           string `json:"webhookURL"`
}

// PutAlertsConfigurationJSONBody defines parameters for PutAlertsConfiguration.
type PutAlertsConfigurationJSONBody AlertNotificationConfig

// PostClustersAddJSONBody defines parameters for PostClustersAdd.
type PostClustersAddJSONBody Cluster

// PutAlertsConfigurationJSONRequestBody defines body for PutAlertsConfiguration for application/json ContentType.
type PutAlertsConfigurationJSONRequestBody = PutAlertsConfigurationJSONBody

// PostClustersAddJSONRequestBody defines body for PostClustersAdd for application/json ContentType.
type PostClustersAddJSONRequestBody = PostClustersAddJSONBody

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Get the current alert notification configuration
	// (GET /alertsConfiguration)
	GetAlertsConfiguration(ctx echo.Context) error
	// Update the alert notification configuration
	// (PUT /alertsConfiguration)
	PutAlertsConfiguration(ctx echo.Context) error
	// Add a new Couchbase cluster to Prometheus
	// (POST /clusters/add)
	PostClustersAdd(ctx echo.Context) error
	// Collects diagnostic information about CMOS for Support analysis.
	// (POST /collectInformation)
	PostCollectInformation(ctx echo.Context) error
	// Outputs the OpenAPI specification for this API.
	// (GET /openapi.json)
	GetOpenapiJson(ctx echo.Context) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// GetAlertsConfiguration converts echo context to params.
func (w *ServerInterfaceWrapper) GetAlertsConfiguration(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetAlertsConfiguration(ctx)
	return err
}

// PutAlertsConfiguration converts echo context to params.
func (w *ServerInterfaceWrapper) PutAlertsConfiguration(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PutAlertsConfiguration(ctx)
	return err
}

// PostClustersAdd converts echo context to params.
func (w *ServerInterfaceWrapper) PostClustersAdd(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostClustersAdd(ctx)
	return err
}

// PostCollectInformation converts echo context to params.
func (w *ServerInterfaceWrapper) PostCollectInformation(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostCollectInformation(ctx)
	return err
}

// GetOpenapiJson converts echo context to params.
func (w *ServerInterfaceWrapper) GetOpenapiJson(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetOpenapiJson(ctx)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/alertsConfiguration", wrapper.GetAlertsConfiguration)
	router.PUT(baseURL+"/alertsConfiguration", wrapper.PutAlertsConfiguration)
	router.POST(baseURL+"/clusters/add", wrapper.PostClustersAdd)
	router.POST(baseURL+"/collectInformation", wrapper.PostCollectInformation)
	router.GET(baseURL+"/openapi.json", wrapper.GetOpenapiJson)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/8xXW2/bNhT+KwS3R1Vyk2JL9TTPCwYPSRPE6VNWFDR5ZLGhSJY8tGsE/u8DKSW+RMpl",
	"W4e9GTo8t+87hx99R7lprNGg0dPyjnpeQ8PSz7EChx8MykpyhtLoidGVXEQTE0LGL0xdOmPBoQRPy4op",
	"Dxm1O5/uKDRMqvjjRwcVLekPxTZh0WUrTuOhoXybjHrF+O1zQWbx0GCQTUZxbYGW1My/AMcYdqKCR3Cv",
	"7IibwOs58/C38GiYZgtoQOOlcRi/CKhYUEjLk9H7tw9V6tDMwcUqLfN+ZZyIZzujRyd1QiZ4uD6b7Zjm",
	"xihgurM5zRrocdxk1MHXIB0IWt5sT+5k+9QDWG08DkTM6MtSHaK3E7Qv45OT8TrkK2ea3sJrUMr0W4zH",
	"XoMUoFHiutf4JGEdFoOkeeAOcIjrF/KZWu3K70XVOeOuwFujPbx2oaNvb30mrSjo0NDyJvlucz90eFCp",
	"uaVZF7Kv0Cd3+rVrG52CA3H6DSOQSq3b9fPcSRuj0JJe10BSUrKCeW3MLamZJ3MATbYBSPBSL0i6lT4z",
	"Kz9XUkFGmBaEM60NkjmQdtEFma/J5PxiltOsh+0uycerszShxjUMaUmDU9vjAxzvuD5GLh6WujJd48g4",
	"7lzGyfTLwybmPE1LO1p0cv85I1PNY9mxmpLWiNaXRbHvtskOALw6nV2T8eWUmIpgDWTSoZaIIzNwS8nj",
	"PaMkh274usRjy3gN5CgfPcq5Wq1ylsy5cYui8/XF2XRy+mF2+ib6xAteotprgZwbLdFE/MifYTQ6+olc",
	"zD24JZtLJXFNZhipfjNY5RKcb/tavk0jbkEzK2lJj/NRfpzuS6zTfBUsjqnfixS/L9ptjqOYvk0FLenv",
	"gOOe45HhdilTyKPR6J5A0CkKs1Z1S1B88W2CVv+eU8dhYXxE4SQ4BxpJcmnH2BG94/qwCm3VMYIPTcPc",
	"um0tEc+7KAmWJ90zakMPRpdhEKOvATz+asT6v4Fnu3boAmz+HyyNh3AlPnAO3ldBqTUJVjAEEVF+9y8W",
	"uq8gPeVN9ZIpKYjUkdz9EfmYakpT8vx0bDJa8Pah5gsmkqraTpcPBsZ47J50fizEd5qU+0fjd5iMV6jZ",
	"ntbG3C+S2n6hONj+tj/ChACxN0sHLI6FIIxoWJHtfdsRRdCQS2cawBqC7zg0SgHHqW5Vrrsdn2Dy8fln",
	"4UX4hoVVTMbYj1uboQPWRGVSZrGIomAC2oAkvpdIV+Abuc2Y+/qg6a4qT4RkC208Sk52HAibm4BJ8Ell",
	"HJkFa41DwjRTay993mLRyUh+PwJDGnHRnvvD/3NteJb3mCvq9nE+It4C3y5kbARr6aOsH8BxkfDzaZXv",
	"Aww7523eKMDgPC1vDl9fZ4YzRc4ld0ZJrPfeAWVRqGiOj9ryZHQyKtqLomBWFkmd+6P9BktQxsZ/XMPx",
	"fn77/t1DoE+bvwIAAP//bscinBYPAAA=",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
