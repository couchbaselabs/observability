// Package v1 provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.8.3 DO NOT EDIT.
package v1

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"encoding/json"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// CouchbaseCluster defines model for CouchbaseCluster.
type CouchbaseCluster struct {
	CouchbaseConfig CouchbaseServerConfig     `json:"couchbaseConfig"`
	Metadata        CouchbaseCluster_Metadata `json:"metadata"`
	Nodes           []string                  `json:"nodes"`
}

// CouchbaseCluster_Metadata defines model for CouchbaseCluster.Metadata.
type CouchbaseCluster_Metadata struct {
	AdditionalProperties map[string]string `json:"-"`
}

// CouchbaseServerConfig defines model for CouchbaseServerConfig.
type CouchbaseServerConfig struct {
	ManagementPort float32 `json:"managementPort"`
	Password       *string `json:"password,omitempty"`
	Username       *string `json:"username,omitempty"`
}

// PrometheusScrapeConfig defines model for PrometheusScrapeConfig.
type PrometheusScrapeConfig struct {
	Labels  PrometheusScrapeConfig_Labels `json:"labels"`
	Targets []string                      `json:"targets"`
}

// PrometheusScrapeConfig_Labels defines model for PrometheusScrapeConfig.Labels.
type PrometheusScrapeConfig_Labels struct {
	AdditionalProperties map[string]string `json:"-"`
}

// GetClustersParams defines parameters for GetClusters.
type GetClustersParams struct {
	IncludeSensitiveInfo *bool `json:"includeSensitiveInfo,omitempty"`
}

// Getter for additional properties for CouchbaseCluster_Metadata. Returns the specified
// element and whether it was found
func (a CouchbaseCluster_Metadata) Get(fieldName string) (value string, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for CouchbaseCluster_Metadata
func (a *CouchbaseCluster_Metadata) Set(fieldName string, value string) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]string)
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for CouchbaseCluster_Metadata to handle AdditionalProperties
func (a *CouchbaseCluster_Metadata) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]string)
		for fieldName, fieldBuf := range object {
			var fieldVal string
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for CouchbaseCluster_Metadata to handle AdditionalProperties
func (a CouchbaseCluster_Metadata) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for PrometheusScrapeConfig_Labels. Returns the specified
// element and whether it was found
func (a PrometheusScrapeConfig_Labels) Get(fieldName string) (value string, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for PrometheusScrapeConfig_Labels
func (a *PrometheusScrapeConfig_Labels) Set(fieldName string, value string) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]string)
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for PrometheusScrapeConfig_Labels to handle AdditionalProperties
func (a *PrometheusScrapeConfig_Labels) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]string)
		for fieldName, fieldBuf := range object {
			var fieldVal string
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for PrometheusScrapeConfig_Labels to handle AdditionalProperties
func (a PrometheusScrapeConfig_Labels) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Obtain the current Couchbase Clusters state.
	// (GET /clusters)
	GetClusters(ctx echo.Context, params GetClustersParams) error
	// Outputs the current config in YAML format.
	// (GET /config)
	GetConfig(ctx echo.Context) error
	// Outputs the OpenAPI specification for this API.
	// (GET /openapi.json)
	GetOpenapiJson(ctx echo.Context) error
	// Obtain the current Couchbase Prometheus monitoring hosts.
	// (GET /prometheusTargets)
	GetPrometheusTargets(ctx echo.Context) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// GetClusters converts echo context to params.
func (w *ServerInterfaceWrapper) GetClusters(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetClustersParams
	// ------------- Optional query parameter "includeSensitiveInfo" -------------

	err = runtime.BindQueryParameter("form", true, false, "includeSensitiveInfo", ctx.QueryParams(), &params.IncludeSensitiveInfo)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter includeSensitiveInfo: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetClusters(ctx, params)
	return err
}

// GetConfig converts echo context to params.
func (w *ServerInterfaceWrapper) GetConfig(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetConfig(ctx)
	return err
}

// GetOpenapiJson converts echo context to params.
func (w *ServerInterfaceWrapper) GetOpenapiJson(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetOpenapiJson(ctx)
	return err
}

// GetPrometheusTargets converts echo context to params.
func (w *ServerInterfaceWrapper) GetPrometheusTargets(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetPrometheusTargets(ctx)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/clusters", wrapper.GetClusters)
	router.GET(baseURL+"/config", wrapper.GetConfig)
	router.GET(baseURL+"/openapi.json", wrapper.GetOpenapiJson)
	router.GET(baseURL+"/prometheusTargets", wrapper.GetPrometheusTargets)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/6RW3W7jNhN9FYLfd6mVvEnRbnXVwBsULpLGqHNTbHMxpsYWU4nkkkO7huF3L0Z//k+7",
	"zV1Czpkzc+Zw5K1UtnbWoKEg860MqsQamj/HNqpyDgHHVQyEns+gKDRpa6CaeuvQk8Yg8wVUARPpDo44",
	"bw+3ZqGXfPR/jwuZy/9le86sI8wGthn6FfoOtEtkjQQFEFyn30raOJS5DOS1aUDdgZ2/oiI+MLZoQzVh",
	"/SYGvIeN3O0S6fFr1B4LmX/p8AfVJGcNvlygvdzVtwlZg4El1mhoaj0dlG5iPUfPNA5CWFtfXOwrBvQG",
	"arxwedLkCdOlhqbe1kglxjBTHhz+p44qmGMV3jdQAr9Ees9I+wxJX895vwzRZmFbPxsC1eiPNehK5s3V",
	"T4MNUmVrmchW6v3kEzExKpWJjJ4xJZELeZYdw3aJLDAorx2rIXP52/3sWdxNJ8IuBJUoWp2jB74X7Cat",
	"kEvXCk1oZtsR3zlQJYqbdHTGuV6vU2iuU+uXWYcN2cNkfP/r7P4DY1g1TdVRC+LRGk2WVRV/xNHo5nvx",
	"NA/oVzDXlaaNmBGoP8WHq1Wu0Ie2r9VHZrAODTgtc3mbjtJbyQ6msplhptpt0/yzxEZvdkaTclLIXP6M",
	"NO5jGOihxhbwZSs1k3yN6Df7UWijqljgDE3QpFc44Ykm3arj/AUuIFY0uLVzwdzaCsHI3e6FnROcZbUY",
	"cDMa9ZZA05QIzlVaNUVmr4Fb3R4Q/KvF16/ZxnXHbhhH79GQCASEvSUGoTg+xLoGv5G5fJoTaNNGdLD9",
	"IHvh2kxpA83U8IY7vY/JP1thLIkYUFCpg9ALsbFRvMZAYg2GDosR/CR83ejAnj+fXMv1j3oS/kXZBurq",
	"WMjT/XWm1PPwVnr7CXVoylOxIrlI4UitNl5oI36/e3wQbT+dVJ1x037E1wz61Mb9wmHv9M6FlXTcMnPx",
	"prhNRyI4VHrRJePS25HdTSdvNN4nuA7uunfD8n/eb99rEkzPgt8pxLDm33pNV75P59+CMxkfdCB+WvsM",
	"ov9CfMMDO0DX+6VZ2kAhbVlD80ug3VYnFVgFlXjUyttKU3m0vvMsq/iaM+WfRp9G3avNwOmsWaqXs33G",
	"FVbW8Tf9er4fPv743ZDoZfd3AAAA///TtoXLFAoAAA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
