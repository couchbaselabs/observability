// Package v1 provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.8.3 DO NOT EDIT.
package v1

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"encoding/json"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// StandardResponse defines model for StandardResponse.
type StandardResponse interface{}

// PostAddPrometheusTargetJSONBody defines parameters for PostAddPrometheusTarget.
type PostAddPrometheusTargetJSONBody struct {
	Labels    PostAddPrometheusTargetJSONBody_Labels `json:"labels"`
	Name      string                                 `json:"name"`
	NameLabel *string                                `json:"nameLabel,omitempty"`
	Overwrite *bool                                  `json:"overwrite,omitempty"`
	Targets   []string                               `json:"targets"`
}

// PostAddPrometheusTargetJSONBody_Labels defines parameters for PostAddPrometheusTarget.
type PostAddPrometheusTargetJSONBody_Labels struct {
	AdditionalProperties map[string]string `json:"-"`
}

// PostAddPrometheusTargetJSONRequestBody defines body for PostAddPrometheusTarget for application/json ContentType.
type PostAddPrometheusTargetJSONRequestBody = PostAddPrometheusTargetJSONBody

// Getter for additional properties for PostAddPrometheusTargetJSONBody_Labels. Returns the specified
// element and whether it was found
func (a PostAddPrometheusTargetJSONBody_Labels) Get(fieldName string) (value string, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for PostAddPrometheusTargetJSONBody_Labels
func (a *PostAddPrometheusTargetJSONBody_Labels) Set(fieldName string, value string) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]string)
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for PostAddPrometheusTargetJSONBody_Labels to handle AdditionalProperties
func (a *PostAddPrometheusTargetJSONBody_Labels) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]string)
		for fieldName, fieldBuf := range object {
			var fieldVal string
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for PostAddPrometheusTargetJSONBody_Labels to handle AdditionalProperties
func (a PostAddPrometheusTargetJSONBody_Labels) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Add a Prometheus target to this CMOS instance
	// (POST /addPrometheusTarget)
	PostAddPrometheusTarget(ctx echo.Context) error
	// Outputs the OpenAPI specification for this API.
	// (GET /openapi.json)
	GetOpenapiJson(ctx echo.Context) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// PostAddPrometheusTarget converts echo context to params.
func (w *ServerInterfaceWrapper) PostAddPrometheusTarget(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostAddPrometheusTarget(ctx)
	return err
}

// GetOpenapiJson converts echo context to params.
func (w *ServerInterfaceWrapper) GetOpenapiJson(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetOpenapiJson(ctx)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.POST(baseURL+"/addPrometheusTarget", wrapper.PostAddPrometheusTarget)
	router.GET(baseURL+"/openapi.json", wrapper.GetOpenapiJson)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/7xVXW/bNhT9K8TdHlVJTYqt1dOyLBg8JLNR9y3LwzV5FbGVSI68smcE+u8DKTmZYnto",
	"MWAviUDynHvu1/ETSNs5a8hwgOoJgmyow/S5ZjQKvfpIwVkTKJ5ZQ8saqvsnQKU0a2uwXXnryLOmAFWN",
	"baAM3D+OnsB+iX/J9B1U9+x7esiA946ggo21LaGBYcjA05+99qSguo+Ql0d285kkw5B9U1Ty3vr4MbEE",
	"9to8wpDN9STsVwnKJspjYQ9DfK5NbSOxtIZRcorRoW6hSlc/SdvLZoOBcmk7yMBgF0muD8eZWBiZQwa9",
	"j5iG2YWqKOawIQNFQXrtYhmggo8360/iarUQthbckLi2ptaPvcd4L9bkt1oSZNBqSVMTp8BXDmVD4iIv",
	"j2Ludrsc03Vu/WMxYUNxu7i++X198yZihgxYcztLQdxZo9nGQos/+rK8+EEsN4H8Fje61bwXa0b5Rbw5",
	"q3JLPox5bd+mVjky6DRUcJmX+SVk4JCb1N8ClVp52xE31IdP6B8p1dzZkP7HWUj0CwUVrGzgqxOAscsU",
	"+Ger9ofukUkM6FyrZeIoPoeo6rAf6fbrR7HFDbXhPOjEjL4e/alpJ17Gi9sY4PSsb8nvvOaEVVRj3/Kz",
	"ytcznwGnqiRJmqn7V23oPe6PFiXpzA4pvzAeb80cGX0hHYxmkyJflOU3teR7TzVU8F3x4mnFZGjFkZul",
	"+PNdepkOMcoWOwwClSIV835Xfvhf5YwjKrD1hGov6C8dOAg0Sjx3NQk0lkVwJHWto9Ahg9B3Hfp9XHKl",
	"BIrjxNgKbnQQ13fLtdAmMBpJCVtMO5cfEpr2ar5PvxIvx3e/xWf/sXEnJmNeihgrmtxlXh5SHclEbf2Y",
	"ydVq8Sr3Zc+u55Bs8UBwHpyPcaNbkQ/pN26u4dZKbMWdlt62mpuZaVZF0cbrxgau3pfvy0ImhyvQ6SJZ",
	"2Wm2X2hLrXVdrNJZvh/ffnj3TPQw/B0AAP//A83EubMHAAA=",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
