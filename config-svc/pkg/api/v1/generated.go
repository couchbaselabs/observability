// Package v1 provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.11.0 DO NOT EDIT.
package v1

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// Defines values for ErrorResponseOk.
const (
	False ErrorResponseOk = false
)

// AlertNotificationConfig defines model for AlertNotificationConfig.
type AlertNotificationConfig struct {
	Email *EmailAlertNotificationConfig `json:"email,omitempty"`
	Slack *SlackAlertNotificationConfig `json:"slack,omitempty"`
}

// Cluster defines model for Cluster.
type Cluster struct {
	CouchbaseConfig struct {
		ManagementPort *float32 `json:"managementPort,omitempty"`
		Password       string   `json:"password"`
		UseTLS         *bool    `json:"useTLS,omitempty"`
		Username       string   `json:"username"`
	} `json:"couchbaseConfig"`
	Hostname      string `json:"hostname"`
	MetricsConfig *struct {
		MetricsPort *float32 `json:"metricsPort,omitempty"`
	} `json:"metricsConfig,omitempty"`
	Name *string `json:"name,omitempty"`
}

// EmailAlertNotificationConfig defines model for EmailAlertNotificationConfig.
type EmailAlertNotificationConfig struct {
	From       string  `json:"from"`
	Hello      *string `json:"hello,omitempty"`
	Host       string  `json:"host"`
	Identity   *string `json:"identity,omitempty"`
	Password   *string `json:"password,omitempty"`
	RequireTLS *bool   `json:"requireTLS,omitempty"`
	Secret     *string `json:"secret,omitempty"`
	Username   *string `json:"username,omitempty"`
}

// ErrorResponse defines model for ErrorResponse.
type ErrorResponse struct {
	Error string          `json:"error"`
	Ok    ErrorResponseOk `json:"ok"`
}

// ErrorResponseOk defines model for ErrorResponse.Ok.
type ErrorResponseOk bool

// SlackAlertNotificationConfig defines model for SlackAlertNotificationConfig.
type SlackAlertNotificationConfig struct {
	// The Slack webhook has been configured using slack_api_file, and cannot be managed by CMOS.
	ConfiguredExternally *bool  `json:"configuredExternally,omitempty"`
	WebhookURL           string `json:"webhookURL"`
}

// PutAlertsConfigurationJSONBody defines parameters for PutAlertsConfiguration.
type PutAlertsConfigurationJSONBody = AlertNotificationConfig

// PostClustersAddJSONBody defines parameters for PostClustersAdd.
type PostClustersAddJSONBody = Cluster

// PutAlertsConfigurationJSONRequestBody defines body for PutAlertsConfiguration for application/json ContentType.
type PutAlertsConfigurationJSONRequestBody = PutAlertsConfigurationJSONBody

// PostClustersAddJSONRequestBody defines body for PostClustersAdd for application/json ContentType.
type PostClustersAddJSONRequestBody = PostClustersAddJSONBody

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Get the current alert notification configuration
	// (GET /alertsConfiguration)
	GetAlertsConfiguration(ctx echo.Context) error
	// Update the alert notification configuration
	// (PUT /alertsConfiguration)
	PutAlertsConfiguration(ctx echo.Context) error
	// Add a new Couchbase cluster to Prometheus
	// (POST /clusters/add)
	PostClustersAdd(ctx echo.Context) error
	// Collects diagnostic information about CMOS for Support analysis.
	// (POST /collectInformation)
	PostCollectInformation(ctx echo.Context) error
	// Outputs the OpenAPI specification for this API.
	// (GET /openapi.json)
	GetOpenapiJson(ctx echo.Context) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// GetAlertsConfiguration converts echo context to params.
func (w *ServerInterfaceWrapper) GetAlertsConfiguration(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetAlertsConfiguration(ctx)
	return err
}

// PutAlertsConfiguration converts echo context to params.
func (w *ServerInterfaceWrapper) PutAlertsConfiguration(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PutAlertsConfiguration(ctx)
	return err
}

// PostClustersAdd converts echo context to params.
func (w *ServerInterfaceWrapper) PostClustersAdd(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostClustersAdd(ctx)
	return err
}

// PostCollectInformation converts echo context to params.
func (w *ServerInterfaceWrapper) PostCollectInformation(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostCollectInformation(ctx)
	return err
}

// GetOpenapiJson converts echo context to params.
func (w *ServerInterfaceWrapper) GetOpenapiJson(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetOpenapiJson(ctx)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/alertsConfiguration", wrapper.GetAlertsConfiguration)
	router.PUT(baseURL+"/alertsConfiguration", wrapper.PutAlertsConfiguration)
	router.POST(baseURL+"/clusters/add", wrapper.PostClustersAdd)
	router.POST(baseURL+"/collectInformation", wrapper.PostCollectInformation)
	router.GET(baseURL+"/openapi.json", wrapper.GetOpenapiJson)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/8xXW28bNxP9KwS/73G9K9tB6+xTVdUoVNixYTlPbhBQ5EjLmEsy5FCKYOi/F+SurIt3",
	"fUmbom/CknM7c2YO9UC5qa3RoNHT8oF6XkHN0s+hAocfDMqZ5Ayl0SOjZ3Iej5gQMn5h6toZCw4leFrO",
	"mPKQUbvz6YFCzaSKP/7vYEZL+r9iG7BooxXn8VJfvHVGvWL8/iUnk3ip18k6o7iyQEtqpl+AY3Q7UsEj",
	"uDdWxE3g1ZR5+C48aqbZHGrQeG0cxi8CZiwopOXZ4P3xY5Y61FNwMUvLvF8aJ+Ld9tCjkzohEzzcXkx2",
	"jqbGKGC6PXOa1dBhuM6og69BOhC0vNve3In2qQOwynjs8ZjRGtBJ7r8PlcZ2A8kBBl29e11hh73aKaGr",
	"vmd5+LaKZs7UnTBVoJTpPjEeOw+kAI0SV52Hz9KjxaKXIh64A+xj1ivZk0pt0+9E1TnjbsBboz28dX1E",
	"2878TFoIoENNy7tku439WOFBpuaeZq3LrkSf3SBvXRLRKDgQ598wAqnUqhl2z5200Qst6W0FJAUlS5hW",
	"xtyTinkyBdBk64AEL/WcpB34mVn5eSYVZIRpQTjT2iCZAmnWiiDTFRldXk1ymnV0uw3y8eYiMdS4miEt",
	"aXBqe72nxzumT5GLl6WembZwZBx3Vn86+uVxEnOe2NJQi442nzMy1jymHbMpaYVofVkU+2br7ADAm/PJ",
	"LRlej4mZEayAjFrUUuPIBNxC8rjVlOTQkq8NPLSMV0BO8sGTmMvlMmfpODduXrS2vrgYj84/TM6Pok1c",
	"SRLVXgnk0miJJuJH/gyDwclP5GrqwS3YVCqJKzLB2Oqj3iwX4HxT1+I4UdyCZlbSkp7mg/w0bWesEr8K",
	"Fmnq9zzF7/NmmiMV07exoCX9HXDYcT12uBnK5PJkMNg0EHTywqxV7RAUX3wToFHbl7S4X4aftHAUnAON",
	"JJk0NHZE75g+jkKTdfTgQ10zt2pKS43nrZcEy7PmGbWhA6Pr0IvR1wAefzVi9e/Asx07dAHW/40uDftw",
	"JT5wDt7PglIrEqxgCCKi/O4fTHRfQTrSG+sFU1IQqWNz9ynyMeWUWPIyO9YZLXjzLPQFE0lVbavLB4Qx",
	"HtsHpB8K8YOYsnmi/gBmvEHN9rQ2xn6V1HYLxcH0N/URJgSIPS4ddHEoBGFEw5Js923bKIKGXDtTA1YQ",
	"fNtDoxRwHOtG5drt+Ewnn95/EV6Eb1hYxWT0/bS0CTpgdVQmZebzKAomoA1I4nuJtAkeyW3E3FcHRbdZ",
	"eSIkm2vjUXKyY0DY1ARMgk9mxpFJsNY4JEwztfLS5w0WrYzkGwr0acRVc+8P//e14cW+x1hRt0/zAfEW",
	"+HYgYyFYSR9l/QCOq4SfT6O8cdBvnDdxowCD87S8O3x9XRjOFLmU3Bklsdp7B5RFoeJxfNSWZ4OzQdEs",
	"ioJZWSR17vb2GyxAGRv/3/X7+/n4/btHR5/WfwUAAP//5cxfbIQPAAA=",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
