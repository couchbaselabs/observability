// Package v1 provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.8.3 DO NOT EDIT.
package v1

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// Cluster defines model for Cluster.
type Cluster struct {
	CouchbaseConfig struct {
		ManagementPort *float32 `json:"managementPort,omitempty"`
		Password       string   `json:"password"`
		Secure         *bool    `json:"secure,omitempty"`
		Username       string   `json:"username"`
	} `json:"couchbaseConfig"`
	Hostname string  `json:"hostname"`
	Name     *string `json:"name,omitempty"`
}

// PostClustersAddJSONBody defines parameters for PostClustersAdd.
type PostClustersAddJSONBody Cluster

// PostClustersAddJSONRequestBody defines body for PostClustersAdd for application/json ContentType.
type PostClustersAddJSONRequestBody = PostClustersAddJSONBody

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Add a new Couchbase cluster to Prometheus
	// (POST /clusters/add)
	PostClustersAdd(ctx echo.Context) error
	// Outputs the OpenAPI specification for this API.
	// (GET /openapi.json)
	GetOpenapiJson(ctx echo.Context) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// PostClustersAdd converts echo context to params.
func (w *ServerInterfaceWrapper) PostClustersAdd(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostClustersAdd(ctx)
	return err
}

// GetOpenapiJson converts echo context to params.
func (w *ServerInterfaceWrapper) GetOpenapiJson(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetOpenapiJson(ctx)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.POST(baseURL+"/clusters/add", wrapper.PostClustersAdd)
	router.GET(baseURL+"/openapi.json", wrapper.GetOpenapiJson)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/6RUXW8jJxT9K+i2j7PDJKna7Dw1TaPK1W5j1X1L9wHDHQ8bBigXbFmR/3sFHn8mVhvt",
	"G+Jyzv06hxeQbvDOoo0E7QuQ7HEQ5XhvEkUM+SiU0lE7K8w0OI8haiRoO2EIK/BHV5kuyX4uCO+d7fTi",
	"nehBWLHAAW2cuhDzjcJOJBOhvW0+XlUQ1x6hBZuGOQbYVOAF0coFld+OQYpB20UOEsoU8Cg0d86gsDmW",
	"CIMVA74B3FQQ8J+kAyponw4vj7J92Zfi5l9RxszYO4oXGCv4f6nOp3dE+jpjBmvbue3YbRSyTAwHoQ20",
	"JfTznrCWboBdGXC/u67YxMoaKkghY/oYPbWcn8I2FSgkGbTPa4QW/nyY/cXuphPmOhZ7ZNtqUxA5zmYY",
	"llrmcRkt0VLpe0x854XskV3Xzaucq9WqFiVcu7DgI5b4p8n9wx+zhw8Zs6kg6mhOWmCfndXR5Xmyv1PT",
	"XP/IHueEYSnm2ui4ZrMo5DP7cLHKJQba9rW8yhmcRyu8hhZu6qa+KWuPfdEnl1tTEBeqSM47KkPPIi68",
	"EwUtTB3F0T50pxRsl4wUf3FqvVsX2oIU3hstC5Z/pVzGzoX59H3ADlr4jh9sykeP8p1BN6cqiiFhuSDv",
	"8gAzzXXTvCvtOyzrnovobBqgfcq5D0Ldu+1M5e75gppPVTb2x4RSqBglKZGoS8asCyOlYRBhnUWlFBPM",
	"4oodRDEuikXHpsENGHtMVHB83G+9a3uBb6zwN4yP23e/52ffOM//7DXnyoa6qRtGHqXuRjLWucBiryn7",
	"7azvxxR9ilQsuCO4DK63ebMzMBC0Ty9nNXxyUhj2WcvgjI79iUFbzk0O5++ovW1uGy6Lm7jwmhfbvM32",
	"Ky7ROJ9/9Mt8P119/GFP9GXzbwAAAP//D/1mdJQGAAA=",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
